package com.shashi.service.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import com.shashi.beans.DemandBean;
import com.shashi.beans.ProductBean; // Assuming there's a ProductBean class
import com.shashi.service.DemandService;
import com.shashi.utility.DBUtil;

public class DemandServiceImpl implements DemandService {

    @Override
    public boolean addProduct(String userId, String prodId, int demandQty) {
        boolean flag = false;
        Connection con = DBUtil.provideConnection();
        PreparedStatement ps = null;
        PreparedStatement ps2 = null;
        ResultSet rs = null;

        try {
            ps = con.prepareStatement("select * from user_demand where username=? and prodid=?");
            ps.setString(1, userId);
            ps.setString(2, prodId);
            rs = ps.executeQuery();

            if (rs.next()) {
                flag = true;
            } else {
                ps2 = con.prepareStatement("insert into user_demand values(?,?,?)");
                ps2.setString(1, userId);
                ps2.setString(2, prodId);
                ps2.setInt(3, demandQty);
                int k = ps2.executeUpdate();
                if (k > 0) flag = true;
            }

        } catch (SQLException e) {
            flag = false;
            e.printStackTrace();
        } finally {
            DBUtil.closeConnection(con);
            DBUtil.closeConnection(ps);
            DBUtil.closeConnection(ps2);
            DBUtil.closeConnection(rs);
        }
        return flag;
    }

    @Override
    public boolean removeProduct(String userId, String prodId) {
        boolean flag = false;
        Connection con = DBUtil.provideConnection();
        PreparedStatement ps = null;
        PreparedStatement ps2 = null;
        ResultSet rs = null;

        try {
            ps = con.prepareStatement("select * from user_demand where username=? and prodid=?");
            ps.setString(1, userId);
            ps.setString(2, prodId);
            rs = ps.executeQuery();

            if (rs.next()) {
                ps2 = con.prepareStatement("delete from user_demand where username=? and prodid=?");
                ps2.setString(1, userId);
                ps2.setString(2, prodId);
                int k = ps2.executeUpdate();
                if (k > 0) flag = true;
            } else {
                flag = true;
            }

        } catch (SQLException e) {
            flag = false;
            e.printStackTrace();
        } finally {
            DBUtil.closeConnection(con);
            DBUtil.closeConnection(ps);
            DBUtil.closeConnection(ps2);
            DBUtil.closeConnection(rs);
        }
        return flag;
    }

    @Override
    public boolean addProduct(DemandBean userDemandBean) {
        return addProduct(userDemandBean.getUserName(), userDemandBean.getProdId(), userDemandBean.getDemandQty());
    }

    @Override
    public List<DemandBean> haveDemanded(String prodId) {
        List<DemandBean> demandList = new ArrayList<>();
        Connection con = DBUtil.provideConnection();
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            ps = con.prepareStatement("select * from user_demand where prodid=?");
            ps.setString(1, prodId);
            rs = ps.executeQuery();

            while (rs.next()) {
                DemandBean demand = new DemandBean(rs.getString("username"), rs.getString("prodid"), rs.getInt("quantity"));
                demandList.add(demand);
            }

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBUtil.closeConnection(con);
            DBUtil.closeConnection(ps);
            DBUtil.closeConnection(rs);
        }
        return demandList;
    }

    // New method to add a new product to the inventory
    @Override
    public boolean addNewProduct(ProductBean product) {
        boolean flag = false;
        Connection con = DBUtil.provideConnection();
        PreparedStatement ps = null;

        try {
            ps = con.prepareStatement("insert into products (prodid, name, price, quantity) values (?, ?, ?, ?)");
            ps.setString(1, product.getProdId());
            ps.setString(2, product.getName());
            ps.setDouble(3, product.getPrice());
            ps.setInt(4, product.getQuantity());
            int k = ps.executeUpdate();
            if (k > 0) flag = true;

        } catch (SQLException e) {
            flag = false;
            e.printStackTrace();
        } finally {
            DBUtil.closeConnection(con);
            DBUtil.closeConnection(ps);
        }
        return flag;
    }

    // New method to handle checkout with discounts
    @Override
    public double checkout(String userId, String discountCode) {
        double totalAmount = 0.0;
        Connection con = DBUtil.provideConnection();
        PreparedStatement ps = null;
        ResultSet rs = null;

        try {
            // Fetch user's cart items
            ps = con.prepareStatement("select p.price, ud.quantity from user_demand ud join products p on ud.prodid = p.prodid where ud.username=?");
            ps.setString(1, userId);
            rs = ps.executeQuery();

            while (rs.next()) {
                double price = rs.getDouble("price");
                int quantity = rs.getInt("quantity");
                totalAmount += price * quantity;
            }

            // Apply discount based on discountCode
            totalAmount = applyDiscount(totalAmount, discountCode);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            DBUtil.closeConnection(con);
            DBUtil.closeConnection(ps);
            DBUtil.closeConnection(rs);
        }
        return totalAmount;
    }

    // Helper method to apply discount
    private double applyDiscount(double totalAmount, String discountCode) {
        // Example discount logic
        if ("THANKS10".equals(discountCode)) {
            return totalAmount * 0.9; // 10% discount
        }
        // Add more discount codes and logic as needed
        return totalAmount;
    }
}

Add New Product:
addNewProduct(ProductBean product)
: This method adds a new product to the inventory by inserting it into the 
products
 Table. It uses a 
ProductBean
 Object to get product details.
Checkout with Discounts:
checkout(String userId, String discountCode)
: This method calculates the total amount for the user's cart and applies any applicable discounts. It fetches the user's cart items, calculates the total, and applies a discount based on the provided discount code.
Discount Logic:
applyDiscount(double totalAmount, String discountCode)
: This helper method applies a discount to the total amount based on the discount code. You can expand this method to include more complex discount logic as needed.
These enhancements will allow the system to manage new product lines and apply promotional discounts effectively during Thanksgiving.


